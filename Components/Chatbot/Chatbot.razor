@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using Amazon.BedrockRuntime
@using Amazon.BedrockRuntime.Model
@using Microsoft.AspNetCore.Components.Authorization
@using BlazorAIChatBotOpenAI.Components.Chatbot
@using System.ComponentModel

@inject IJSRuntime JS
@inject NavigationManager Nav

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger Logger
@inject IConfiguration Configuration
@inject IServiceProvider ServiceProvider

<div class="floating-pane">
    <a href="@Nav.GetUriWithQueryParameter("chat", (string?)null)" class="hide-chatbot" title="Close Chat"><span>✖</span></a>

    <div class="chatbot-chat" @ref="chat">
        @if (chatState is not null)
        {
            foreach (var message in chatState.ChatMessages.Where(m => m.Role == ConversationRole.Assistant || m.Role == ConversationRole.User))
            {
            if (!string.IsNullOrEmpty(message.Content[0].Text.ToString()))
                {
                    <p @key="@message" class="message message-@message.Role">@MessageProcessor.AllowImages(message.Content[0].Text.ToString()!)</p>                    
                }
            }
        }
        else if (missingConfiguration)
        {
            <p class="message message-assistant"><strong>The chatbot is missing required configuration.</strong> Please review your app settings.</p>
        }

        @if (thinking)
        {
            <p class="thinking">"[phi3:latest]" is Thinking...</p>
        }

    </div>

    <form class="chatbot-input" @onsubmit="SendMessageAsync">
        <textarea placeholder="Start chatting..." @ref="@textbox" @bind="messageToSend"></textarea>
        <button type="submit" title="Send" disabled="@(chatState is null)">Send</button>
    </form>
</div>

@code {
    bool missingConfiguration;
    ChatState? chatState;
    ElementReference textbox;
    ElementReference chat;
    string? messageToSend;
    bool thinking;
    IJSObjectReference? jsModule;

    protected override async Task OnInitializedAsync()
    {
        AmazonBedrockRuntimeClient? chatClient = ServiceProvider.GetService<AmazonBedrockRuntimeClient>();
        List<Message>? chatMessages = ServiceProvider.GetService<List<Message>>();
        if (chatClient is not null)
        {
            AuthenticationState auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            chatState = new ChatState(auth.User, chatClient, chatMessages, Logger);
        }
        else
        {
            missingConfiguration = true;
        }
    }

    private async Task SendMessageAsync()
    {
        var messageCopy = messageToSend?.Trim();
        messageToSend = null;

        if (chatState is not null && !string.IsNullOrEmpty(messageCopy))
        {
            thinking = true;
            
            await chatState.AddUserMessageAsync(messageCopy, onMessageAdded: StateHasChanged);
            
            thinking = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        jsModule ??= await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Chatbot/Chatbot.razor.js");
        await jsModule.InvokeVoidAsync("scrollToEnd", chat);

        if (firstRender)
        {
            await textbox.FocusAsync();
            await jsModule.InvokeVoidAsync("submitOnEnter", textbox);
        }
    }
}
